# Copyright (c) 2009--2018, the KLFitter developer team
#
# This file is part of KLFitter.
#
# KLFitter is free software: you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
#
# KLFitter is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public
# License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with KLFitter. If not, see <http://www.gnu.org/licenses/>.

image: rootproject/root-ubuntu16

stages:
  - build
  - test


# The basic cmake configuration for making KLFitter.
.cmake_klfitter: &cmake_klfitter
  stage: build
  variables:
    CMAKE_OPTION: '-DKLFITTER_INSTALL_TESTS=TRUE'
  before_script:
    - mkdir -p build && cd build
  script:
    - cmake $CMAKE_OPTION ..
    - make -j || make -j || make -j
  artifacts:
    paths:
    - build
    expire_in: 2 days


# Build the project with cmake. This includes an automatic download of the BAT
# library, and KLFitter and BAT are compiled and linked against each other. This
# is the recommended way to build KLFitter.
cmake-build:
  <<: *cmake_klfitter
  variables:
    CMAKE_OPTION: '-DBUILTIN_BAT=TRUE -DKLFITTER_INSTALL_TESTS=TRUE'


# Alternative build 1: build the project with cmake, but use an existing version
# of the BAT library. For that, we use the script ./cmake/CompileBAT.sh to
# download and install BAT (without cmake). Then cmake uses the
# ./cmake/FindBAT.cmake file to locate that external library.
cmake-build-with-prebuilt-BAT:
  stage: build
  when: manual
  allow_failure: true
  before_script:
    - sudo apt-get update
    - sudo apt-get install wget
    - export BATINSTALLDIR=$PWD/external/BAT
    - mkdir -p build KLFitter
    - mv CMakeLists.txt cmake include src tests KLFitter/
  after_script:
    - mv KLFitter/* ./
    - rm -rf KLFitter
  script:
    - ./KLFitter/cmake/CompileBAT.sh $BATINSTALLDIR
    - cd build
    - cmake -DKLFITTER_INSTALL_TESTS=TRUE ../KLFitter
    - make -j || make -j || make -j
  artifacts:
    paths:
    - build
    - external/BAT
    expire_in: 2 days


# Alternative build 2: build the project with the traditional Makefile. Again
# this utilises the script ./cmake/CompileBAT.sh to download and install BAT (no
# use of Makefile). Then the Makefile locates the BAT installation with the
# $BATINSTALLDIR variable.
makefile-build:
  stage: build
  when: manual
  allow_failure: true
  before_script:
    - sudo apt-get update
    - sudo apt-get install wget
    - export BATINSTALLDIR=$PWD/external/BAT
  script:
    - ./cmake/CompileBAT.sh $BATINSTALLDIR
    - make -j || make -j || make -j
    - make -j tests || make -j tests
    - make install || make install
  artifacts:
    paths:
    - build
    - external/BAT
    expire_in: 2 days


# Run unit tests based on the cmake setup.
cmake-test:
  stage: test
  before_script:
    - export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$PWD/build/lib
    - export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:`root-config --libdir`
  script:
    - ./build/test-bin/test-ljets-lh ./
  dependencies:
    - cmake-build
